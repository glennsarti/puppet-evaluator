Examples('when declaring Resources in YAML',
  Example('types and instances can be declared in YAML',
    Given(@(SRC)),
      create_resource_types(parse_yaml(@(YAML)))
        MyRes:
          ensure: 'Enum[absent,present]'
          mode: 'Integer[0, 07777]'
        |YAML

      parse_yaml(@(YAML)).each |$k, $v| { create_resources($k, $v) }
        myres:
          '/a/b':
            ensure: absent
          '/a/c':
            ensure: present
          '_defaults':
            mode: 0700
        |YAML

      String([resource('myres[/a/b]'), resource('myres[/a/c]')])
      |-SRC
    Evaluates_to(`[MyRes('title' => '/a/b', 'ensure' => 'absent', 'mode' => 448), MyRes('title' => '/a/c', 'ensure' => 'present', 'mode' => 448)]`)),
)

Examples('when using the YAML Puppet parser',
  Example('_eval evaluates expression',
    Given(@(SRC)),
      evaluate_yaml('/test/file.yaml', Binary(@(YAML), '%s'))
        _eval: "1 + 2"
        |YAML
      |SRC
    Evaluates_to(3)),

  Example('_eval evaluates interpolation in block',
    Given(@(SRC)),
      evaluate_yaml('/test/file.yaml', Binary(@(YAML), '%s'))
        _eval: '"${1 + 2}"'
        |YAML
      |SRC
    Evaluates_to('3')),

  Example('_eval evaluates interpolation in block',
    Given(@(SRC)),
      evaluate_yaml('/test/file.yaml', Binary(@(YAML), '%s'))
        _eval: >
          "${1 + 2}"
        |YAML
      |SRC
    Evaluates_to('3')),

  Example('ordered hash with duplicate keys generate errors',
    Given(@(SRC)),
      create_resource_types(parse_yaml(@(YAML)))
        'My::A':
          ensure: 'Enum[absent,present]'
          mode: 'Integer[0, 07777]'
        |YAML

      evaluate_yaml('/test/file.yaml', Binary(@(YAML), '%s'))
        block:
          - my::a:
            - 'a':
                ensure: absent
            - 'a':
                ensure: absent
        |YAML
      |SRC
    Evaluates_with(Error(EVAL_YAML_DUPLICATE_KEY))),

  Example('resources are instantiated',
    Given(@(SRC)),
      create_resource_types(parse_yaml(@(YAML)))
        'My::A':
          ensure: 'Enum[absent,present]'
          mode: 'Integer[0, 07777]'

        'My::B':
          message: String

        'My::C':
          ip: String
        |YAML

      evaluate_yaml('/test/file.yaml', Binary(@(YAML), '%s')) ->
        sequential:
          - parallel:
            - block:
              - my::a:
                - '/a/a':
                    ensure: absent
                    mode: 0644
              - my::b:
                - x:
                    message: The X
                - 'y':
                    message: The Y
                - z:
                    message: The Z
            - block:
              - my::c:
                - a:
                    ip: 192.168.0.1
                - b:
                    ip: 192.168.0.2
                - c:
                    ip: 192.168.0.3
          - block:
            - my::a:
              - '/a/b':
                  ensure: { _eval: "resource('my::a[/a/a]').ensure" }
                  mode: 0600
              - { _eval: "\"test-${resource('my::c[a]').title}\"" }:
                  ensure: { _eval: "resource('my::a[/a/a]').ensure" }
                  mode: 0600
        |YAML
      String([resource('my::a[/a/b]')])
      |SRC
    Evaluates_to(`[My::A('title' => '/a/b', 'ensure' => 'absent', 'mode' => 384)]`)),

  Example('functions are called with positional arguments',
    Given(@(SRC)),
      evaluate_yaml('/test/file.yaml', Binary(@(YAML), '%s'))
        [strftime]:
          - [Timestamp]: '2018-11-24T12:13:14'
          - '%c'
        |YAML
      |SRC
    Evaluates_to(`Sat Nov 24 12:13:14 2018`)),

  Example('functions are called with named arguments',
    Given(@(SRC)),
      evaluate_yaml('/test/file.yaml', Binary(@(YAML), '%s'))
        [Integer]:
          from: '777'
          radix: 8
        |YAML
      |SRC
    Evaluates_to(511)),

  Example('methods are called with positional arguments',
    Given(@(SRC)),
      evaluate_yaml('/test/file.yaml', Binary(@(YAML), '%s'))
          [String, assert_type]:
            - 'hello'
        |YAML
      |SRC
    Evaluates_to(`hello`)),
)
